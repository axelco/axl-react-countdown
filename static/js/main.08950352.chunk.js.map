{"version":3,"sources":["homeTopSectionCd.js","homeChooseThemeSectionCd.js","homePassesSectionCd.js","App.js","serviceWorker.js","index.js"],"names":["HomeTopSectionCd","props","state","expireDate","btnDateState","handleDatesCalculation","bind","datesButtons","value","label","e","preventDefault","this","setState","theme","target","newDate","today","Date","now","toString","datesBtns","map","btn","Button","key","onClick","variant","className","icon","faHourglassStart","size","ButtonGroup","aria-label","viewSeconds","isDark","Alert","faCheck","React","Component","HomeChooseThemeSectionCd","handleThemeChange","themeButtons","text","themesBtns","faLongArrowAltLeft","Row","Col","lg","App","href","id","class","scope","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.08950352.chunk.js","sourcesContent":["import React from 'react';\r\nimport{ButtonGroup, Button, Alert} from 'react-bootstrap'\r\n// import Countdown from './Countdown'\r\nimport Countdown from 'axl-react-countdown';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheck, faHourglassStart } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass HomeTopSectionCd extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state= {\r\n          expireDate : '',\r\n          btnDateState : '',\r\n        }\r\n        //Biding events\r\n        this.handleDatesCalculation = this.handleDatesCalculation.bind(this)\r\n\r\n\r\n        // List of dates buttons\r\n        this.datesButtons = [\r\n            {\r\n                value : \"30d\",\r\n                label : \"30 days\",\r\n            },\r\n            {\r\n                value : \"7d\",\r\n                label : \"7 days\",\r\n            }, \r\n            {\r\n                value : \"5m\",\r\n                label : \"5 min\",\r\n            },  \r\n            {\r\n                value : \"30s\",\r\n                label : \"30 secs\",\r\n            },  \r\n            {\r\n                value : \"10s\",\r\n                label : \"10 secs\",\r\n            },                                                   \r\n        ]\r\n\r\n    }\r\n    \r\n    handleThemeChange(e){\r\n    e.preventDefault();\r\n    this.setState({theme : e.target.value});\r\n    }  \r\n\r\n    handleDatesCalculation(e){\r\n        e.preventDefault();\r\n        let today = Date.now()   \r\n        let newDate;\r\n        let value = e.target.value;\r\n\r\n        switch(value){\r\n            case '30d' :\r\n                newDate = today +(1000 * 60 * 60 * 24 * 30); \r\n                break;\r\n            case '7d'  :\r\n                newDate = today + (1000 * 60 * 60 * 24 * 7); \r\n                break;\r\n            case '5m'  :\r\n                newDate = today + (1000 * 60 * 5); \r\n                break;\r\n            case '30s'  :\r\n                newDate = today + (1000 * 30); \r\n                break;            \r\n            case '10s'  :\r\n                newDate = today + (1000 * 10); \r\n                break;                             \r\n            default :\r\n            newDate = today +(1000 * 60 * 60 * 24 * 30); \r\n        }\r\n\r\n        this.setState({\r\n            expireDate : new Date(newDate).toString(),\r\n            btnDateState : value\r\n        });\r\n    }  \r\n\r\n    componentWillMount(){\r\n        let today = Date.now()   \r\n        let newDate;\r\n        newDate = today +(1000 * 60 * 60 * 24 * 90);     \r\n        this.setState({expireDate : new Date(newDate).toString()})\r\n    }\r\n\r\n    render(){\r\n        \r\n        \r\n        const datesBtns = this.datesButtons.map((btn) =>\r\n            <Button \r\n            key = {btn.value}\r\n            onClick={this.handleDatesCalculation}\r\n            variant=\"outline-light\" \r\n            value={btn.value}\r\n            className= {btn.value === this.state.btnDateState ? ' active' : ''}\r\n                >{btn.label}\r\n            </Button>\r\n     \r\n        \r\n        );       \r\n\r\n        return <>\r\n        \r\n            <article className=\"axl-section axl-section-100 bg-primary-gradient axl-home-icon-section\" >\r\n                <div className=\"centered-icon\">\r\n                  <FontAwesomeIcon icon={faHourglassStart} size=\"lg\"   />\r\n                </div>                  \r\n                <div className=\"container-sm_x text-center\">            \r\n\r\n                    <h1 className=\"mb-5 display-3 text-white\">Axl React CountDown Component</h1>\r\n                    <p className=\"text-white lead-1 mb-5\">A simple and easy to use react component<br/>\r\n                     to trigger a countdown on your web app.</p>\r\n                    \r\n                    <div className=\"py-5\">\r\n                        <ButtonGroup \r\n                            aria-label=\"Buttons group to choose theme\"\r\n                            className=\"\"\r\n                        >\r\n                            {datesBtns}                                                             \r\n                        </ButtonGroup>                            \r\n                    </div>\r\n                    <Countdown \r\n                        expireDate={this.state.expireDate}\r\n                        viewSeconds={true}\r\n                        theme='custom'\r\n                        isDark={true}\r\n                    >\r\n                        <Alert variant='success' className=\"shadow\" >\r\n                            <div className=\"d-flex align-items-center\">\r\n                                <FontAwesomeIcon \r\n                                icon={faCheck} \r\n                                size=\"2x\"\r\n                                className=\"alert-icon\"\r\n                                />\r\n                                <div className=\"ml-4\">\r\n                                    This is a custom text apperaing when time is up. Just add anything you want inside component.\r\n                                </div>\r\n                            </div>\r\n                        </Alert>\r\n                    </Countdown>\r\n\r\n                    \r\n                </div>\r\n            </article>\r\n\r\n        </>\r\n    }\r\n}\r\n\r\nexport default HomeTopSectionCd;","import React from 'react';\r\nimport{Row, Col, ButtonGroup, Button} from 'react-bootstrap'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faFill, faLongArrowAltLeft } from '@fortawesome/free-solid-svg-icons'\r\n\r\n// import Countdown from './Countdown'\r\nimport Countdown from 'axl-react-countdown';\r\n\r\nclass HomeChooseThemeSectionCd extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state= {\r\n            theme : 'highlight',\r\n        }\r\n\r\n        this.handleThemeChange = this.handleThemeChange.bind(this)\r\n\r\n        // List of theme buttons\r\n        this.themeButtons = [\r\n            {\r\n                value: \"custom\",\r\n                text : \"custom css\"\r\n            },                 \r\n            {\r\n                value: \"default\",\r\n                text : \"default\"\r\n            },\r\n            {\r\n                value: \"bordered\",\r\n                text : \"bordered\"\r\n            } ,\r\n            {\r\n                value: \"highlight\",\r\n                text : \"highlighted\"\r\n            },\r\n                     \r\n        ];        \r\n    }\r\n\r\n    handleThemeChange(e){\r\n        e.preventDefault();\r\n        this.setState({theme : e.target.value});\r\n    }      \r\n\r\n    render(){\r\n\r\n        const themesBtns = this.themeButtons.map((btn) =>\r\n            <Button \r\n            key = {btn.value}\r\n            onClick={this.handleThemeChange}\r\n            variant=\"link\" \r\n            value={btn.value}\r\n            className= {btn.value === this.state.theme ? 'active' : ''}\r\n                >{btn.text}\r\n            </Button>\r\n     \r\n        \r\n        );        \r\n\r\n        return <>\r\n            <div className=\"container-fluid axl-home-icon-section\">\r\n                <div className=\"centered-middle-icon\">\r\n                    <FontAwesomeIcon icon={faLongArrowAltLeft} size=\"lg\"   />\r\n                </div>                  \r\n                <Row className=\"flex-row-reverse\">\r\n                    <Col lg={6} className=\"axl-section axl-section-50 \">              \r\n                        <div className=\"container-sm_xx w-100 text-center text-lg-left\">  \r\n                            <h3 className=\"display-4 mb-5 \">Choose your <strong className=\"text-primary\">theme</strong></h3>\r\n                            <p className=\"lead-1 \" >You can choose between the themes offered by the component, OR just build your own css using component's css classes</p>\r\n\r\n                        </div>\r\n                    </Col>                 \r\n                    <Col \r\n                    lg={6} \r\n                    className=\"axl-section axl-section-50 text-right\"\r\n                    >\r\n                        <div className=\"container-sm_xx w-100\">  \r\n                            <div className=\"mb-5\">\r\n                                <ButtonGroup >\r\n                                    {themesBtns}\r\n                                </ButtonGroup>\r\n                                \r\n                            </div>\r\n                            <Countdown \r\n                            expireDate='30 Jan 2020'\r\n                            theme={this.state.theme}\r\n\r\n                            />\r\n                        </div>                    \r\n                    </Col>\r\n                    \r\n                </Row>\r\n\r\n            </div>\r\n        </>\r\n    }\r\n}\r\n\r\nexport default HomeChooseThemeSectionCd;","import React from 'react';\r\nimport{ButtonGroup, Button, Row, Col, Alert} from 'react-bootstrap'\r\n// import Countdown from './Countdown'\r\nimport Countdown from 'axl-react-countdown';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faStopwatch, faHourglassEnd, faLongArrowAltRight} from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass HomePassesSectionCd extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state= {\r\n          passedType : 'default',\r\n          expDate : '01 Jan 1970',\r\n        }\r\n\r\n        this.handleBehavClick = this.handleBehavClick.bind(this)\r\n\r\n        this.filterBtns = [\r\n            {\r\n                value : 'default',\r\n                label : 'default behaviour',\r\n            },\r\n            {\r\n                value : 'custom',\r\n                label : 'Children props behaviour',\r\n            },            \r\n        ]\r\n\r\n    }\r\n\r\n    handleBehavClick(e){\r\n        this.setState({passedType : e.target.value})\r\n    }\r\n\r\n    cdGenerator(){\r\n        let today = new Date().getTime();\r\n        let startCd = today + (1000*5);\r\n        if(this.state.passedType == 'custom'){\r\n            return <Countdown \r\n                expireDate={startCd}\r\n                isDark={true}\r\n            >\r\n                <Alert variant='warning' >\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <FontAwesomeIcon \r\n                        icon={faStopwatch} \r\n                        size=\"2x\"\r\n                        className=\"alert-icon\"\r\n                        />\r\n                        <div className=\"ml-4\">\r\n                            This is a custom text apperaing when time is up. Just add anything you want inside component.\r\n                        </div>\r\n                    </div>\r\n                </Alert>\r\n                \r\n            </Countdown>            \r\n        }\r\n        else{\r\n            return <Countdown \r\n            expireDate={startCd}\r\n\r\n            />\r\n        }\r\n    }\r\n\r\n\r\n    render(){\r\n\r\n        const filterBtns = this.filterBtns.map((btn) =>\r\n            <Button \r\n            key = {btn.value}\r\n            onClick={this.handleBehavClick}\r\n            variant=\"link\" \r\n            value={btn.value}\r\n            className= {btn.value === this.state.passedType ? 'active' : ''}\r\n                >{btn.label}\r\n            </Button>\r\n        );\r\n\r\n        return <>\r\n            <div className=\"container-fluid axl-home-icon-section\">\r\n                <div className=\"centered-middle-icon\">\r\n                  <FontAwesomeIcon icon={faLongArrowAltRight} size=\"lg\"   />\r\n                </div>                \r\n                <Row>\r\n                    <Col \r\n                    lg={6} \r\n                    className=\"axl-section axl-section-50 \"\r\n                    >\r\n\r\n                    <div className=\"container-sm_xx w-100 text-center text-lg-right\">  \r\n                        <h3 className=\"display-4 mb-5 \">And <strong className=\"text-secondary\">When time is passed ?</strong></h3>\r\n                        <p className=\"lead-1 \" >By default, the countDown will display with all values set to 0 </p>\r\n                        <p className=\"lead-2 \">\r\n                        But, if you want to have specific content when time is over, just add your content inside the component itself\r\n                        </p>\r\n                    \r\n                    </div>\r\n                    </Col>\r\n                    <Col lg={6} className=\"axl-section axl-section-50 \">              \r\n                    <div className=\"container-sm_xx w-100 \">\r\n                        <div className=\"d-flex mb-5\">\r\n                            <ButtonGroup >\r\n                            {filterBtns}  \r\n\r\n                            </ButtonGroup>\r\n                                                \r\n                        </div>\r\n                        {this.cdGenerator()}\r\n                        </div>\r\n                    </Col>                 \r\n                </Row>\r\n\r\n            </div>\r\n        </>\r\n    }\r\n}\r\n\r\nexport default HomePassesSectionCd;","import React from 'react';\n\nimport './app.scss';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHourglassHalf } from '@fortawesome/free-solid-svg-icons'\n\nimport HomeTopSectionCd from './homeTopSectionCd'\nimport HomePassesSectionCd from './homePassesSectionCd'\nimport HomeChooseThemeSectionCd from './homeChooseThemeSectionCd'\n\nclass App extends React.Component{\n\n  render(){\n\n    return <>\n\n      <nav className=\"navbar navbar-expand-lg navbar-light\">\n        <a className=\"navbar-brand\" href=\"#\">React CountDown component</a>\n        {/* <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button> */}\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n          \n          <ul className=\"navbar-nav ml-auto\">\n            <li className=\"nav-item active\">\n            <a href=\"https://github.com/axelco/axl-react-countdown\" className=\"btn btn-lg btn-outline-secondary\" >Github</a>\n            </li>\n\n          </ul>\n        </div>\n      </nav>\n     \n      <section className=\"axl-sections\" >\n\n        <HomeTopSectionCd />\n        {/* <HomePassesSectionCd /> */}\n        <HomeChooseThemeSectionCd />\n\n\n        <article className=\"py-5 bg-light\">\n          <div className=\"container-sm text-left\">\n            <h2 className=\"display-3 mb-5 text-primary text-center\">\n              Doc\n            </h2>\n            <h3 className=\"mb-4\">Quick start</h3>\n            <h4 className=\"mb-4\">Install npm module</h4>\n            <pre>\n              {\"npm i axl-react-countdown\"}\n            </pre>\n            <h4 className=\"mb-4\">Import module wherever you need it on your project :</h4>\n            <pre className=\"code \">\n              <span className=\"js-declare\">{\"import \"}</span>\n              <span className=\"props\">{\"Countdown \"}</span>\n              <span className=\"js-declare\">{\"from \"}</span>\n              {\"axl-react-countdown\"}\n            </pre>\n            <p>And add the component inside your render part :</p>\n            <pre className=\"code \">\n              <div className=\"component\">{'<Countdown '}</div>\n              <div className=\"pl-4\">\n                <span className=\"props\">{'expireDate'}</span>\n                {'='}\n                <span className=\"attr-string\">{'\"31 Dec 2020\"'}</span>\n              </div>\n              <div className=\"component\">{'/>'}</div>\n            </pre>  \n            <hr className=\"my-5\" />\n            <h3 className=\"mb-4\">Options</h3>\n            <h4 >Adding custom content when time is up</h4>\n            <p>When counter is done, you can set custom content by just adding it inside the component :</p>\n            <pre className=\"code \">\n              <div className=\"component\">{'<Countdown '}</div>\n              <div className=\"pl-4\">\n                <span className=\"props\">{'expireDate'}</span>\n                {'='}\n                <span className=\"attr-string\">{'\"31 Dec 2020\"'}</span>\n              </div>\n              <div className=\"component\">{'>'}</div>\n              <div className=\"pl-4\">\n                <span className=\"html-tag\">{\"<div>\"}</span>\n                {\"This is a content inside the component\"}\n                <span className=\"html-tag\">{\"</div>\"}</span>\n              </div>\n              <div className=\"component\">{'<Countdown />'}</div>\n            </pre>\n            <h4 className=\"mb-4\">List of options</h4>  \n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th scope=\"col\">prop name</th>\n                  <th scope=\"col\">type</th>\n                  <th scope=\"col\">default</th>\n                  <th scope=\"col\">description</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <th scope=\"row\">expireDate</th>\n                  <td>String</td>\n                  <td></td>\n                  <td>Required : type a date time inside this prop.<br/> Example : \"30 Dec 2021\" ; \"30 Dec 2020 23:59:59\"</td>\n                </tr>\n                <tr>\n                  <th scope=\"row\">theme</th>\n                  <td>String</td>\n                  <td>''</td>\n                  <td>Optional : some themes are available insied component :<br/>\n                  \"bordered\", \"highlighted\".<br/>\n                  You can use your own styles by handling component css classes\n                  </td>\n                </tr>\n                <tr>\n                  <th scope=\"row\">showSecs</th>\n                  <td>boolean</td>\n                  <td>true</td>\n                  <td>Show / Hide seconds from component</td>\n                </tr>\n              </tbody>\n            </table>   \n            <h4 className=\"mb-4\">Designing your custom theme</h4>\n            <p>Just add the css you need in your css or scss file. To have your own custom theme without overriding the default one, you can set a theme name as a theme props.</p>         \n          </div>\n        </article>\n\n      </section>\n      </>\n\n  }\n\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}